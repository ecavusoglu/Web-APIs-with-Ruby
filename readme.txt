My program takes user input as a choice between 5 different countries. Regarding the user's choice, it connects a Countries API called "restcountries.eu" where there is information about each country. I store the information of the country's capital and its currency. Then I connect to a Currency API called "https://api.fixer.io/latest" I used this currency data to gather the data of the selected country's currency and compare it with EUR/USD regarding the country. Then I connect to a University API called "http://universities.hipolabs.com/" where there is information about all the universities in a country and I used this API to gather the data of all the universities in the selected country.
In my program, I used "APIS.rb" as my API base class (superclass) as an abstract class which has common functionalities for its subclasses. On this class, I used "open-uri" for the connection to each API. 
I had 3 separate API classes called "CountriesAPI.rb", "CurrencyAPI.rb" and "UniversitiesAPI.rb" (one for each API) as my API Proxy classes. I used these classes as Remote Proxy classes handling the connections and connecting each web api using the superclass' common functionality. On each API Proxy class, I created a fallback function which would rescue the program in case the api call fails. My program still works in case of such a situation with the fallback data. 
I had a log class called "Logger.rb" that is a Singleton and uses the json module to write out data to a file in real time.
As a third design pattern, I used Decorator Pattern using the instance objects of the CountriesAPI for CurrencyAPI and the CurrencyAPI for the UniversitiesAPI.